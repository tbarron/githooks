#!/usr/bin/env python
"""
git hook for adding version and gerrit Change-Id to commit message

!@! conform to just inserting Change-Id:

This git hooks assumes that the current package's version is defined in a file
named version.py somewhere in the tree with a single line of the form

   __version__ = '<version-string>'

To use this hook, if your git repository is at $GIT,

   mkdir $GIT/githooks
   cp from/somewhere/commit-msg $GIT/githooks
   rm -f .git/hooks/commit-msg
   ln -s $GIT/githooks/commit-msg .git/hooks/commit-msg

"""
import optparse
import os
import pdb
import shlex
import StringIO
import subprocess
import sys


# -----------------------------------------------------------------------------
def main(args):
    """
    Entry point
    """
    p = optparse.OptionParser()
    p.add_option('-d', '--debug',
                 action='store_true', default=False, dest='debug',
                 help='run the debugger')
    (o, a) = p.parse_args(args)
    if o.debug:
        pdb.set_trace()

    filename = a[1]

    msg = contents(filename)
    (payload, version, cid, comments) = split_msg(msg)

    if version.replace('Version:', '').strip() == '':
        version = get_version()

    if cid.replace('Change-Id:', '').strip() == '':
        cid = get_change_id(msg)

    newname = save_new(filename, payload, version, cid, comments)
    os.rename(filename, filename + ".old")
    os.rename(newname, filename)


# -----------------------------------------------------------------------------
def catch_stdout(cmd, input=None):
    """
    Run *cmd*, optionally passing string *input* to it on stdin, and return
    what the process writes to stdout
    """
    p = subprocess.Popen(shlex.split(cmd),
                         stdin=subprocess.PIPE,
                         stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    if input:
        p.stdin.write(input)
    (o, e) = p.communicate()
    if p.returncode == 0:
        return o
    else:
        return ''


# -----------------------------------------------------------------------------
def contents(filename):
    """
    Read a file and return its contents
    """
    f = open(filename, 'rU')
    rval = [z.rstrip('\n') for z in f.readlines()]
    f.close()
    return rval


# -----------------------------------------------------------------------------
def get_change_id(msg):
    """
    Generate a change id line based on the commit message and return it
    """
    istr = 'tree '
    istr += catch_stdout('git write-tree')
    parent = catch_stdout('git rev-parse "HEAD^0"')
    if parent:
        istr += 'parent ' + parent
    istr += 'author ' + catch_stdout('git var GIT_AUTHOR_IDENT')
    istr += 'committer ' + catch_stdout('git var GIT_COMMITTER_IDENT')
    istr += ''.join(msg)
    rval = catch_stdout('git hash-object -t commit --stdin',
                        input=istr)
    return 'Change-Id: I' + rval


# -----------------------------------------------------------------------------
def get_version():
    """
    Scan the current git repo for a file named 'version.py'. We assume it
    contains a statement that sets __version__ and we use that to construct and
    return a line of the form 'Version:    x.x.x'
    """
    groot = catch_stdout('git rev-parse --show-toplevel')
    for r, d, f in os.walk(groot.strip()):
        if 'version.py' in f:
            vpath = os.path.join(r, 'version.py')
            break
    vinfo = contents(vpath)
    eval(compile('\n'.join(vinfo), vpath, 'exec'))
    rval = "Version:   %s" % locals()["__version__"]
    return rval


# -----------------------------------------------------------------------------
def save_new(filename, payload, version, cid, comments):
    """
    Write *payload*, *version*, *cid*, and *comments* to *filename*.new,
    returning the new name
    """
    newname = filename + ".new"
    o = open(newname, 'w')
    o.writelines([p + '\n' for p in payload])
    if 0 < len(payload[-1]):
        o.write("\n")
    o.writelines([version.strip() + '\n'])
    o.writelines([cid.strip() + '\n'])
    o.writelines([p + '\n' for p in comments])
    o.close()
    return newname


# -----------------------------------------------------------------------------
def split_msg(msg):
    """
    Scan *msg* and split it into payload, version line, change id line, and
    comments and return those components
    """
    payload = []
    comments = []
    version = ''
    cid = ''
    for l in msg:
        if l.startswith('#'):
            comments.append(l)
        elif 'Version:' in l:
            version = l
            # if l.strip().replace('Version:', '') == '':
            #     version = ''
            # else:
            #     version = l
        elif 'Change-Id:' in l:
            cid = l
            # if l.strip().replace('Change-Id:', '') == '':
            #     cid = ''
            # else:
            #     cid = l
        else:
            payload.append(l)
    return(payload, version, cid, comments)


# -----------------------------------------------------------------------------
if __name__ == '__main__':
    main(sys.argv)


# #!/bin/sh
# # From Gerrit Code Review 2.8
# #
# # Part of Gerrit Code Review (http://code.google.com/p/gerrit/)
# #
# # Copyright (C) 2009 The Android Open Source Project
# #
# # Licensed under the Apache License, Version 2.0 (the "License");
# # you may not use this file except in compliance with the License.
# # You may obtain a copy of the License at
# #
# # http://www.apache.org/licenses/LICENSE-2.0
# #
# # Unless required by applicable law or agreed to in writing, software
# # distributed under the License is distributed on an "AS IS" BASIS,
# # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# # See the License for the specific language governing permissions and
# # limitations under the License.
# #
# 
# unset GREP_OPTIONS
# 
# CHANGE_ID_AFTER="Bug|Issue"
# MSG="$1"
# 
# # Check for, and add if missing, a unique Change-Id
# #
# add_ChangeId() {
# 	clean_message=`sed -e '
# 		/^diff --git a\/.*/{
# 			s///
# 			q
# 		}
# 		/^Signed-off-by:/d
# 		/^#/d
# 	' "$MSG" | git stripspace`
# 	if test -z "$clean_message"
# 	then
# 		return
# 	fi
# 
# 	if test "false" = "`git config --bool --get gerrit.createChangeId`"
# 	then
# 		return
# 	fi
# 
# 	# Does Change-Id: already exist? if so, exit (no change).
# 	if grep -i '^Change-Id:' "$MSG" >/dev/null
# 	then
# 		return
# 	fi
# 
# 	id=`_gen_ChangeId`
# 	T="$MSG.tmp.$$"
# 	AWK=awk
# 	if [ -x /usr/xpg4/bin/awk ]; then
# 		# Solaris AWK is just too broken
# 		AWK=/usr/xpg4/bin/awk
# 	fi
# 
# 	# How this works:
# 	# - parse the commit message as (textLine+ blankLine*)*
# 	# - assume textLine+ to be a footer until proven otherwise
# 	# - exception: the first block is not footer (as it is the title)
# 	# - read textLine+ into a variable
# 	# - then count blankLines
# 	# - once the next textLine appears, print textLine+ blankLine* as these
# 	#   aren't footer
# 	# - in END, the last textLine+ block is available for footer parsing
#     hpssic_version=`_hpssic_version`
# 	$AWK '
# 	BEGIN {
# 		# while we start with the assumption that textLine+
# 		# is a footer, the first block is not.
# 		isFooter = 0
# 		footerComment = 0
# 		blankLines = 0
# 	}
# 
# 	# Skip lines starting with "#" without any spaces before it.
# 	/^#/ { next }
# 
# 	# Skip the line starting with the diff command and everything after it,
# 	# up to the end of the file, assuming it is only patch data.
# 	# If more than one line before the diff was empty, strip all but one.
# 	/^diff --git a/ {
# 		blankLines = 0
# 		while (getline) { }
# 		next
# 	}
# 
# 	# Count blank lines outside footer comments
# 	/^$/ && (footerComment == 0) {
# 		blankLines++
# 		next
# 	}
# 
# 	# Catch footer comment
# 	/^\[[a-zA-Z0-9-]+:/ && (isFooter == 1) {
# 		footerComment = 1
# 	}
# 
# 	/]$/ && (footerComment == 1) {
# 		footerComment = 2
# 	}
# 
# 	# We have a non-blank line after blank lines. Handle this.
# 	(blankLines > 0) {
# 		print lines
# 		for (i = 0; i < blankLines; i++) {
# 			print ""
# 		}
# 
# 		lines = ""
# 		blankLines = 0
# 		isFooter = 1
# 		footerComment = 0
# 	}
# 
# 	# Detect that the current block is not the footer
# 	(footerComment == 0) && (!/^\[?[a-zA-Z0-9-]+:/ || /^[a-zA-Z0-9-]+:\/\//) {
# 		isFooter = 0
# 	}
# 
# 	{
# 		# We need this information about the current last comment line
# 		if (footerComment == 2) {
# 			footerComment = 0
# 		}
# 		if (lines != "") {
# 			lines = lines "\n";
# 		}
# 		lines = lines $0
# 	}
# 
# 	# Footer handling:
# 	# If the last block is considered a footer, splice in the Change-Id at the
# 	# right place.
# 	# Look for the right place to inject Change-Id by considering
# 	# CHANGE_ID_AFTER. Keys listed in it (case insensitive) come first,
# 	# then Change-Id, then everything else (eg. Signed-off-by:).
# 	#
# 	# Otherwise just print the last block, a new line and the Change-Id as a
# 	# block of its own.
# 	END {
# 		unprinted = 1
# 		if (isFooter == 0) {
# 			print lines "\n"
# 			lines = ""
# 		}
# 		changeIdAfter = "^(" tolower("'"$CHANGE_ID_AFTER"'") "):"
# 		numlines = split(lines, footer, "\n")
# 		for (line = 1; line <= numlines; line++) {
# 			if (unprinted && match(tolower(footer[line]), changeIdAfter) != 1) {
# 				unprinted = 0
#                 print "Version:   '"$hpssic_version"'"
# 				print "Change-Id: I'"$id"'"
# 			}
# 			print footer[line]
# 		}
# 		if (unprinted) {
#             print "Version:   '"$hpssic_version"'"
# 			print "Change-Id: I'"$id"'"
# 		}
# 	}' "$MSG" > "$T" && mv "$T" "$MSG" || rm -f "$T"
# }
# _gen_ChangeIdInput() {
# 	echo "tree `git write-tree`"
# 	if parent=`git rev-parse "HEAD^0" 2>/dev/null`
# 	then
# 		echo "parent $parent"
# 	fi
# 	echo "author `git var GIT_AUTHOR_IDENT`"
# 	echo "committer `git var GIT_COMMITTER_IDENT`"
# 	echo
# 	printf '%s' "$clean_message"
# }
# _gen_ChangeId() {
# 	_gen_ChangeIdInput |
# 	git hash-object -t commit --stdin
# }
# _hpssic_version() {
#     verval=`cat hpssic/version.py | sed -e 's%\(__version__ = "\|"$\)%%g'`
#     echo $verval
# }
# 
# add_ChangeId
