#!/usr/bin/env python
"""
git hook to ensure that the version has been incremented since the last commit

This git hooks assumes that the current package's version is defined in a file
named version.py somewhere in the tree with a single line of the form

   __version__ = '<version-string>'

To use this hook, if your git repository is at $GIT,

   mkdir $GIT/githooks
   cp from/somewhere/pre-commit $GIT/githooks
   rm -f .git/hooks/pre-commit
   ln -s $GIT/githooks/pre-commit .git/hooks/pre-commit

"""
import ghlib
import pdb
import pexpect
import time

def main(args):
    """
    Entry point
    """
    (vhead, vtail) = ghlib.get_version_prefix()
    (ghead, gtail) = ghlib.git_describe_prefix()

    if g_pfx == v_pfx and v_cmt != g_cmt + 1:
        raise SystemExit("""
        Looks like %s should contain %s.%d
                                    but it's got %s.%d

        I'd update it for you, but git won't let me. >:(
        """ % (vfname, v_pfx, g_cmt+1, v_pfx, v_cmt))
   
    if not version_staged():
        raise SystemExit("""
        %s is not staged. Looks like you need to make sure it contains the right
        version and do
          
            git add %s

        then try your commit again.
        """ % (vfname, vfname))
         
def get_version():
    """
    Scan the git repo for a file named 'version.py'. We assume it contains a
    statement that sets __version__ and we use that to get the current version.
    """
    groot = catch_stdout('')
vfname = 'hpssic/version.py'
exec(open(vfname).read())
g = [x.strip() for x in pexpect.run("git describe").split('-')]
v = __version__.split('.')
g_pfx = '.'.join(g[0].split('.')[0:2])
v_pfx = '.'.join(v[0:2])

if 1 == len(g):
     g_cmt = 0
else:
     g_cmt = int(g[-2])
v_cmt = int(v[-1])

if g_pfx == v_pfx and v_cmt != g_cmt + 1:
     raise SystemExit("""
     Looks like %s should contain %s.%d
                                    but it's got %s.%d

     I'd update it for you, but git won't let me. >:(
     """ % (vfname, v_pfx, g_cmt+1, v_pfx, v_cmt))

status = pexpect.run("git status --porc")
staged = False
for line in status.split("\n"):
     if vfname in line and line.startswith("M  "):
          staged = True

if not staged:
     raise SystemExit("""
     %s is not staged. Looks like you need to make sure it contains the right
     version and do
          
         git add %s

     then try your commit again.
     """ % (vfname, vfname))
